# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.

trigger:
- main

pool: 'my-agent'  # This applies to the entire pipeline

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'a42e1089-d76f-474b-b8e5-47e1a5731c19'

  # Web app name
  webAppName: 'ambitious-ocean-536765011ce24ea29e90410872e75ed4'

  # Environment name
  environmentName: 'ambitious-ocean-536765011ce24ea29e90410872e75ed4'

  # Remove vmImageName variable since we're using self-hosted agent

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    # Remove the pool section here - it will inherit from the pipeline-level pool
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    # Remove the pool section here - it will inherit from the pipeline-level pool
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: ambitious-ocean-536765011ce24ea29e90410872e75ed4'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              runtimeStack: 'NODE|20LTS'
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              startUpCommand: 'npm run start'